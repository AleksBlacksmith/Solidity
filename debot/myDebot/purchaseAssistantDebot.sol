
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

import "initListDebot.sol";

contract purchaseAssistantDebot is initListDebot {

    function getDebotInfo() public functionID(0xDEB) override view returns(
        string name, string version, string publisher, string key, string author,
        address support, string hello, string language, string dabi, bytes icon
    ) {
        name = "TODO DeBot";
        version = "0.2.0";
        publisher = "TON Labs";
        key = "TODO list manager";
        author = "TON Labs";
        support = address.makeAddrStd(0, 0x66e01d6df5a8d7677d9ab2daf7f258f1e2a7fe73da5320300395f99e01dc3b5f);
        hello = "Hi, i'm a TODO DeBot.";
        language = "en";
        dabi = m_debotAbi.get();
        icon = m_icon;
    }

     function getRequiredInterfaces() public view override returns (uint256[] interfaces) {
        return [ Terminal.ID, Menu.ID, AddressInput.ID, ConfirmInput.ID ];
    }

    function onError(uint32 sdkError, uint32 exitCode) public {
        Terminal.print(0, format("Operation failed. sdkError {}, exitCode {}", sdkError, exitCode));
        _menu();
    }

    function onSuccess() public view {
        _getStat(tvm.functionId(setStat));
    }

    function start() public override {
        Terminal.input(tvm.functionId(savePublicKey),"Please enter your public key",false);
    }

     function setStat(allPurchase stat) public {
        m_stat = stat;
        _menu();
    }

    function _menu() private {
        string sep = '----------------------------------------';
        Menu.select(
            format(
                "You have {}/{}/{} (not paid/paid/total price) tasks",
                    m_stat.notPaid,
                    m_stat.paid,
                    m_stat.totalPrice
            ),
            sep,
            [
                // MenuItem("Add new purchase","",tvm.functionId(newPurchase)),
                MenuItem("Show purchase list","",tvm.functionId(getPurchase)),
                MenuItem("Buy","",tvm.functionId(buy)),
                MenuItem("Delete purchase","",tvm.functionId(delPurchase))
            ]
        );
    }

    function buy(uint32 index) public {
        index = index;
        if (m_stat.paid + m_stat.notPaid > 0) {
            Terminal.input(tvm.functionId(updateTask_), "Enter purchese id:", false);
        } else {
            Terminal.print(0, "Sorry, there is nothing on your shopping list.");
            _menu();
        }
    }

    function updateTask_(string value) public {
        (uint256 num,) = stoi(value);
        m_purchaseId = uint32(num);
        ConfirmInput.get(tvm.functionId(updateTask__),"Is it purchased?");
    }

    function updateTask__(uint value) public view {
        optional(uint256) pubkey = 0;
        iTodo(m_address).buy{
                abiVer: 2,
                extMsg: true,
                sign: true,
                pubkey: pubkey,
                time: uint64(now),
                expire: 0,
                callbackId: tvm.functionId(onSuccess),
                onErrorId: tvm.functionId(onError)
            }(m_purchaseId, value);
    }


    function getPurchase(uint32 index) public view {
        index = index;
        optional(uint256) none;
        iTodo(m_address).getPurchase{
            abiVer: 2,
            extMsg: true,
            sign: false,
            pubkey: none,
            time: uint64(now),
            expire: 0,
            callbackId: tvm.functionId(showPurchase_),
            onErrorId: 0
        }();
    }

    function showPurchase_( purchase[] shoping ) public {
        if (shoping.length > 0) {
            Terminal.print(0, "Your purchase list:");
            for (uint i; i < shoping.length; i++) {
                purchase shop = shoping[i];
                string paid;
                if (shop.bought) {
                    paid = 'âœ“';
                } else {
                    paid = ' ';
                }
                Terminal.print(0, format("{} {}  \"{}\"  at {}", shop.identifier, paid, shop.purchaseName, shop.createTime));
            }
        } else {
            Terminal.print(0, "Your purchase list is empty");
        }
        _menu();
    }

    function delPurchase(uint32 index) public {
        index = index;
        if (m_stat.paid + m_stat.notPaid > 0) {
            Terminal.input(tvm.functionId(delPurchase_), "Enter purchase number:", false);
        } else {
            Terminal.print(0, "Sorry, you have no purchases to delete");
            _menu();
        }
    }

    function delPurchase_(string value) public view {
        (uint256 num,) = stoi(value);
        optional(uint256) pubkey = 0;
        iTodo(m_address).delPurchase{
                abiVer: 2,
                extMsg: true,
                sign: true,
                pubkey: pubkey,
                time: uint64(now),
                expire: 0,
                callbackId: tvm.functionId(onSuccess),
                onErrorId: tvm.functionId(onError)
            }(uint(num));
    }

    function _getStat(uint32 answerId) private view {
        optional(uint256) none;
        iTodo(m_address).getStat{
            abiVer: 2,
            extMsg: true,
            sign: false,
            pubkey: none,
            time: uint64(now),
            expire: 0,
            callbackId: answerId,
            onErrorId: 0
        }();
    }

    function checkStatus(int8 acc_type) public override {
        if (acc_type == 1) { // acc is active and  contract is already deployed
            _getStat(tvm.functionId(setStat));

        } else if (acc_type == -1)  { // acc is inactive
            Terminal.print(0, "You don't have a TODO list yet, so a new contract with an initial balance of 0.2 tokens will be deployed");
            AddressInput.get(tvm.functionId(creditAccount),"Select a wallet for payment. We will ask you to sign two transactions");

        } else  if (acc_type == 0) { // acc is uninitialized
            Terminal.print(0, format(
                "Deploying new contract. If an error occurs, check if your TODO contract has enough tokens on its balance"
            ));
            deploy();

        } else if (acc_type == 2) {  // acc is frozen
            Terminal.print(0, format("Can not continue: account {} is frozen", m_address));
        }
    }

    function onCodeUpgrade() internal override {
        tvm.resetStorage();
    }
    
}