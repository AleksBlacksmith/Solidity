
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;
pragma AbiHeader pubkey;
pragma AbiHeader time;

import "base/Debot.sol";
import "base/Terminal.sol";
import "base/Menu.sol";
import "base/AddressInput.sol";
import "base/ConfirmInput.sol";
import "base/Upgradable.sol";
import "base/Sdk.sol";
import "structs.sol";
import "HasConstructorWithPubkey.sol";


abstract contract initListDebot is Debot, Upgradable, structs { // Upgradable ???
    bytes m_icon;

    TvmCell public m_todoCode; // TODO contract code
    TvmCell public m_todoData;
    TvmCell public m_todoStateInit;
    address m_address;  // TODO contract address
    allPurchase m_stat;        // Statistics of incompleted and completed tasks
    uint32 m_purchaseId;    // Task id for update. I didn't find a way to make this var local
    uint256 m_masterPubKey; // User pubkey
    address m_msigAddress;  // User wallet address

    uint32 INITIAL_BALANCE =  200000000;  // Initial TODO contract balance

    function setTodoCode(TvmCell code, TvmCell data) public {
        require(msg.pubkey() == tvm.pubkey(), 101);
        tvm.accept();
        m_todoCode = code;
        m_todoData = data;
        m_todoStateInit = tvm.buildStateInit(m_todoCode, m_todoData);
    }

    function savePublicKey(string value) public {
        (uint res, bool status) = stoi("0x" + value);
        if (status) {
            m_masterPubKey = res;

            Terminal.print(0, "Checking if you already have a TODO list ...");
            TvmCell deployState = tvm.insertPubkey(m_todoStateInit, m_masterPubKey);
            m_address = address.makeAddrStd(0, tvm.hash(deployState));
            Terminal.print(0, format( "Info: your TODO contract address is {}", m_address));
            Sdk.getAccountType(tvm.functionId(checkStatus), m_address);

        } else {
            Terminal.input(tvm.functionId(savePublicKey),"Wrong public key. Try again!\nPlease enter your public key",false);
        }
        }

    // function start() public override {
    //     Terminal.input(tvm.functionId(savePublicKey),"Please enter your public key",false);
    // }

    function checkStatus(int8 acc_type)  virtual public {
        // if (acc_type == 1) { // acc is active and  contract is already deployed
        //     // getPurchasesStat(tvm.functionId(setStat));
        //     Terminal.print(0, "acc is active nd contract is already deployed");

        // } else if (acc_type == -1)  { // acc is inactive
        //     Terminal.print(0, "You don't have a TODO list yet, so a new contract with an initial balance of 0.2 tokens will be deployed");
        //     AddressInput.get(tvm.functionId(creditAccount),"Select a wallet for payment. We will ask you to sign two transactions");

        // } else  if (acc_type == 0) { // acc is uninitialized
        //     Terminal.print(0, format(
        //         "Deploying new contract. If an error occurs, check if your TODO contract has enough tokens on its balance"
        //     ));
        //     deploy();

        // } else if (acc_type == 2) {  // acc is frozen
        //     Terminal.print(0, format("Can not continue: account {} is frozen", m_address));
        // }
    }

    function creditAccount(address value) public {
        m_msigAddress = value;
        optional(uint256) pubkey = 0;
        TvmCell empty;
        IMsig(m_msigAddress).sendTransaction{
            abiVer: 2,
            extMsg: true,
            sign: true,
            pubkey: pubkey,
            time: uint64(now),
            expire: 0,
            callbackId: tvm.functionId(waitBeforeDeploy),
            onErrorId: tvm.functionId(onErrorRepeatCredit)  // Just repeat if something went wrong
        }(m_address, INITIAL_BALANCE, false, 3, empty);
    }

    function onErrorRepeatCredit(uint32 sdkError, uint32 exitCode) public {
        // TODO: check errors if needed.
        sdkError;
        exitCode;
        creditAccount(m_msigAddress);
    }


    function waitBeforeDeploy() public  {
        Sdk.getAccountType(tvm.functionId(checkIfStatusIs0), m_address);
    }

    function checkIfStatusIs0(int8 acc_type) public {
        if (acc_type ==  0) {
            deploy();
        } else {
            waitBeforeDeploy();
        }
    }

    function deploy() internal view {
            TvmCell image = tvm.insertPubkey(m_todoStateInit, m_masterPubKey);
            optional(uint256) none;
            TvmCell deployMsg = tvm.buildExtMsg({
                abiVer: 2,
                dest: m_address,
                callbackId: 0,
                onErrorId:  tvm.functionId(onErrorRepeatDeploy),
                time: 0,
                expire: 0,
                sign: true,
                pubkey: none,
                stateInit: image,
                call: {HasConstructorWithPubkey, m_masterPubKey}
            });
            tvm.sendrawmsg(deployMsg, 1);
    }


    function onErrorRepeatDeploy(uint32 sdkError, uint32 exitCode) public view {
        sdkError;
        exitCode;
        deploy();
    }

    //  function getPurchasesStat(uint32 answerId) private view {
    //     optional(uint256) none;
    //     iTodo(m_address).getStat{
    //         abiVer: 2,
    //         extMsg: true,
    //         sign: false,
    //         pubkey: none,
    //         time: uint64(now),
    //         expire: 0,
    //         callbackId: answerId,
    //         onErrorId: 0
    //     }();
    // }
    // function onCodeUpgrade() virtual internal override {
    //     tvm.resetStorage();
    // }
}
