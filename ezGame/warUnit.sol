
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

import "intGO.sol";

contract warUnit {

    constructor() public {
        require(tvm.pubkey() != 0, 101);
        require(msg.pubkey() == tvm.pubkey(), 102);
        tvm.accept();
    }

    struct _user {
        address warriorAddress;
        address archerAddress;
        uint warriorXP;
        uint warriorShield;
        uint warriorPower;
        uint archerXP;
        uint archerShield;
        uint archerPower;
    }

    mapping (uint => _user) internal userNum;

    uint userKey = 0;

    function newUser(address war, address arch) public {
        tvm.accept();
        userKey ++;
        userNum[userKey].warriorAddress = war;
        userNum[userKey].archerAddress = arch;
    }

    function getXP() virtual public {
        tvm.accept();
    }

    function getShield() virtual public {
        tvm.accept();
    }

    function getPower() virtual public {
        tvm.accept();
    }

    function getAttack(string) virtual public returns (string) {
        tvm.accept();
    }

    function userInfo(uint user) public returns (address warAddr, address archAddr, uint warXP, uint warShield, uint warPower, uint archXP, uint archShield, uint archPower) {
        tvm.accept();
        warAddr = userNum[user].warriorAddress;
        archAddr = userNum[user].archerAddress;
        warXP = userNum[user].warriorXP;
        warShield = userNum[user].warriorShield;
        warPower = userNum[user].warriorPower;
        archXP = userNum[user].archerXP;
        archShield = userNum[user].archerShield;
        archPower = userNum[user].archerPower;
    }
}
