
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

import "intGO.sol";

contract warUnit is intGO {

    constructor() public {
        require(tvm.pubkey() != 0, 101);
        require(msg.pubkey() == tvm.pubkey(), 102);
        tvm.accept();
    }

    struct _unit {
        address warriorAddress;
        address archerAddress;
        uint warriorHP;
        uint warriorShield;
        uint warriorPower;
        uint archerHP;
        uint archerShield;
        uint archerPower;
    }

    uint HP = 5;
    uint Shield = 1;
    uint Power = 3;

    mapping (address => _unit) internal baseAddress;

    function newWarriorUnit(address baseAddr) internal {
        tvm.accept();
        baseAddress[baseAddr].warriorAddress = msg.sender;
    }

    function newArcherUnit(address baseAddr) internal {
        tvm.accept();
        baseAddress[baseAddr].archerAddress = msg.sender;
    }


    function getXP() virtual public {
        tvm.accept();
    }

    function getShield() virtual public {
        tvm.accept();
    }

    function getPower() virtual public {
        tvm.accept();
    }

    function getAttack(uint power) virtual external override {
        tvm.accept();
        HP = HP + Shield - power;
    }

    function attack(intGO enemyAddress) internal {
        tvm.accept();
        enemyAddress.getAttack(Power);
    }

    function orderAttack(intGO unitAddress, address enemyAddress) private {
        tvm.accept();
        unitAddress.attack(enemyAddress);
    }

    function baseInfo(address baseAddr) public returns (address warAddr, address archAddr, uint warXP, uint warShield, uint warPower, uint archXP, uint archShield, uint archPower) {
        tvm.accept();
        warAddr = baseAddress[baseAddr].warriorAddress;
        archAddr = baseAddress[baseAddr].archerAddress;
        warXP = baseAddress[baseAddr].warriorXP;
        warShield = baseAddress[baseAddr].warriorShield;
        warPower = baseAddress[baseAddr].warriorPower;
        archXP = baseAddress[baseAddr].archerXP;
        archShield = baseAddress[baseAddr].archerShield;
        archPower = baseAddress[baseAddr].archerPower;
    }

    function dead(uint hp) internal {
        if (hp <= 0) {
            msg.sender.transfer(1, true, 160);
        }
    }
}
