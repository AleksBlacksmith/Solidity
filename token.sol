
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

// This is class that describes you smart contract.
contract token {

    constructor() public {
        require(tvm.pubkey() != 0, 101);
        require(msg.pubkey() == tvm.pubkey(), 102);
        tvm.accept();
    }
    
    modifier accept() {
        tvm.accept();
        _;
    }

    struct tokenShoes {
        string brandName;
        uint shoesSize;  
        string color;  
    }
    
    struct shoesSale {
        string brandName;
        uint shoesSize;  
        string color;
        uint price;  
    }

    mapping (uint => uint) tokenOwner;
    uint saleKey = 0;

    tokenShoes[] shoesList;
    shoesSale[] saleList;

    function createTokenShoes(string brandName, uint size, string color) public accept returns (string) {
        if (!(shoesList.empty())) {
            for (uint i = 0; i <= shoesList.length - 1; i++) {
                // require (shoesList[i].brandName == brandName, 102, "A token with the same name already exists.");
                if (shoesList[i].brandName == brandName) {
                    return "A token with the same name already exists.";
                    break;
                }
            }
            shoesList.push(tokenShoes(brandName, size, color));
            uint key = shoesList.length - 1;
            tokenOwner[key] = msg.pubkey();
        }
        else {
            shoesList.push(tokenShoes(brandName, size, color));
            uint key = shoesList.length - 1;
            tokenOwner[key] = msg.pubkey();
        }
    }

    function ShoesList() public accept returns(string[]) {
        string[] list;
        for (uint i = 0; i <= shoesList.length - 1; i++)
        {
            list.push(shoesList[i].brandName);
        }
        return list;
    }

    function infoShoes(uint key) public accept returns (string BrandName, uint Size, string Color) {
        BrandName = shoesList[key].brandName;
        Size = shoesList[key].shoesSize;
        Color = shoesList[key].color;
    }

    function sale(uint key, uint price) public accept {
        require(msg.pubkey() == tvm.pubkey(), 101);
        saleList.push(shoesSale(shoesList[key].brandName, shoesList[key].shoesSize, shoesList[key].color, price));
        for (uint i = key; i < shoesList.length - 1; i++) {
            shoesList[i] = shoesList[i+1];
        }
        shoesList.pop();
    }
    function saleInfo(uint key) public accept returns(string BrandName, uint Size, string Color, uint Price) {
        BrandName = saleList[key].brandName;
        Size = saleList[key].shoesSize;
        Color = saleList[key].color;
        Price = saleList[key].price;
    }

    function ListSale() public accept returns(string[]) {
        string[] list;
        for (uint i = 0; i <= saleList.length - 1; i++)
        {
            list.push(saleList[i].brandName);
        }
        return list;
    }
    

}
